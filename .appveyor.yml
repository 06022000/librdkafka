version: 0.11.4-R-pre{build}
pull_requests:
  do_not_increment_build_number: true
image:
 - Visual Studio 2013
 - Ubuntu
configuration: Release
environment:
  matrix:
  - platform: x64
  - platform: win32
install:
- ps: |
      if ($isWindows) {
         $OpenSSLVersion = "1_0_2n"
         $OpenSSLExe = "OpenSSL-$OpenSSLVersion.exe"

         Remove-Item C:\\OpenSSL-Win32 -recurse
         Remove-Item C:\\OpenSSL-Win64 -recurse

         Write-Host "Installing OpenSSL v1.0 32-bit ..." -ForegroundColor Cyan
         Write-Host "Downloading..."
         $exePath = "$($env:USERPROFILE)\\Win32OpenSSL-1_0_2n.exe"
         (New-Object Net.WebClient).DownloadFile('https://slproweb.com/download/Win32OpenSSL-1_0_2n.exe', $exePath)
         Write-Host "Installing..."
         cmd /c start /wait $exePath /silent /verysilent /sp- /suppressmsgboxes /DIR=C:\\OpenSSL-Win32
         Write-Host "Installed" -ForegroundColor Green

         Write-Host "Installing OpenSSL v1.0 64-bit ..." -ForegroundColor Cyan
         Write-Host "Downloading..."
         $exePath = "$($env:USERPROFILE)\\Win64OpenSSL-1_0_2n.exe"
         (New-Object Net.WebClient).DownloadFile('https://slproweb.com/download/Win64OpenSSL-1_0_2n.exe', $exePath)
         Write-Host "Installing..."
         cmd /c start /wait $exePath /silent /verysilent /sp- /suppressmsgboxes /DIR=C:\\OpenSSL-Win64
         Write-Host "Installed" -ForegroundColor Green

         if (!(Test-Path("C:\\OpenSSL-Win32"))) {
                  echo "Downloading https://slproweb.com/download/Win32$OpenSSLExe"
                  Start-FileDownload 'https://slproweb.com/download/Win32$OpenSSLExe'
                  Start-Process "Win32$OpenSSLExe" -ArgumentList "/silent /verysilent /sp- /suppressmsgboxes" -Wait
         } else {
                echo "OpenSSL-Win32 already exists: not downloading"
         }

         if (!(Test-Path("C:\\OpenSSL-Win64"))) {
              echo "Downloading https://slproweb.com/download/Win64$OpenSSLExe"
              Start-FileDownload 'https://slproweb.com/download/Win64$OpenSSLExe' 
              Start-Process "Win64$OpenSSLExe" -ArgumentList "/silent /verysilent /sp- /suppressmsgboxes" -Wait
         } else {
              echo "OpenSSL-Win64 already exists: not downloading"
         }

         # Download the CoApp tools.
         $msiPath = "$($env:USERPROFILE)\\CoApp.Tools.Powershell.msi"
         (New-Object Net.WebClient).DownloadFile('http://coapp.org/files/CoApp.Tools.Powershell.msi', $msiPath)

         # Install the CoApp tools from the downloaded .msi.
         Start-Process -FilePath msiexec -ArgumentList /i, $msiPath, /quiet -Wait

         # Make the tools available for later PS scripts to use.
         $env:PSModulePath = $env:PSModulePath + ';C:\\Program Files (x86)\\Outercurve Foundation\\Modules'
         Import-Module CoApp
      }
cache:
- c:\OpenSSL-Win32
- c:\OpenSSL-Win64
nuget:
  account_feed: true
  project_feed: true
  disable_publish_on_pr: true
before_build:
- cmd: nuget restore win32/librdkafka.sln
- sh: sudo apt-get install -y libssl-dev zlib1g-dev libsasl2-dev
build_script:
- sh: ./configure && make -j2 all examples check
build: off
#  project: win32/librdkafka.sln
#  publish_nuget: true
#  publish_nuget_symbols: true
#  include_nuget_references: true
#  parallel: true
#  verbosity: normal
#  on:
#    CI_WINDOWS: true

test_script:
- cmd: if exist DISABLED\win32\outdir\v140 ( win32\outdir\v140\%PLATFORM%\%CONFIGURATION%\tests.exe -l -p1 ) else ( win32\outdir\v120\%PLATFORM%\%CONFIGURATION%\tests.exe -l -p1 )
- sh: make -C tests run_local

artifacts:
- path: test_report*.json
  name: Test report
- path: '*.nupkg'
  name: Packages
- path: '**\*.dll'
  name: Libraries
- path: '**\*.lib'
  name: Libraries
- path: '**\*.pdb'
  name: Libraries
- path: '**\*.exe'
  name: Executables
before_deploy:
- ps: >-
    # FIXME: Add to Deployment condition above:

    # APPVEYOR_REPO_TAG = true



    # This is the CoApp .autopkg file to create.

    $autopkgFile = "win32/librdkafka.autopkg"


    # Get the ".autopkg.template" file, replace "@version" with the Appveyor version number, then save to the ".autopkg" file.

    cat ($autopkgFile + ".template") | % { $_ -replace "@version", $env:appveyor_build_version } > $autopkgFile


    # Use the CoApp tools to create NuGet native packages from the .autopkg.

    Write-NuGetPackage $autopkgFile


    # Push all newly created .nupkg files as Appveyor artifacts for later deployment.

    Get-ChildItem .\*.nupkg | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }
deploy:
- provider: S3
  access_key_id:
    secure: t+Xo4x1mYVbqzvUDlnuMgFGp8LjQJNOfsDUAMxBsVH4=
  secret_access_key:
    secure: SNziQPPJs4poCHM7dk6OxufUYcGQhMWiNPx6Y1y6DYuWGjPc3K0APGeousLHsbLv
  region: us-west-1
  bucket: librdkafka-ci-packages
  folder: librdkafka/p-librdkafka__bld-appveyor__plat-windows__arch-$(platform)__bldtype-$(configuration)__tag-$(APPVEYOR_REPO_TAG_NAME)__sha-$(APPVEYOR_REPO_COMMIT)__bid-$(APPVEYOR_BUILD_ID)
  artifact: /.*\.(nupkg)/
  max_error_retry: 3
  on:
    APPVEYOR_REPO_TAG: true
notifications:
- provider: Email
  to:
  - magnus@edenhill.se
  on_build_success: false
  on_build_failure: true
  on_build_status_changed: true
